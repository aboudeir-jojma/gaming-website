// Script pour forcer l'affichage du canvas du jeu
// Probl√®me: le canvas est cr√©√© avec display: none et ne devient jamais visible

(function() {
    console.log("üîß Fix Canvas Display - Script de correction d√©marr√©");
    
    // Fonction pour forcer l'affichage du canvas
    function forceCanvasDisplay() {
        // Chercher tous les canvas dans le document
        const canvases = document.querySelectorAll('canvas');
        console.log(`üìä Trouv√© ${canvases.length} canvas(s)`);
        
        canvases.forEach((canvas, index) => {
            if (canvas.style.display === 'none') {
                console.log(`üéØ Canvas ${index}: Affichage forc√© (√©tait cach√©)`);
                canvas.style.display = '';
                canvas.style.visibility = 'visible';
                canvas.style.opacity = '1';
            } else {
                console.log(`‚úÖ Canvas ${index}: D√©j√† visible`);
            }
        });
        
        // Chercher aussi les √©l√©ments c3htmlwrap
        const htmlWraps = document.querySelectorAll('.c3htmlwrap');
        console.log(`üì¶ Trouv√© ${htmlWraps.length} √©l√©ment(s) c3htmlwrap`);
        
        htmlWraps.forEach((wrap, index) => {
            if (wrap.style.display === 'none') {
                console.log(`üéØ c3htmlwrap ${index}: Affichage forc√© (√©tait cach√©)`);
                wrap.style.display = '';
                wrap.style.visibility = 'visible';
                wrap.style.opacity = '1';
            } else {
                console.log(`‚úÖ c3htmlwrap ${index}: D√©j√† visible`);
            }
        });
    }
    
    // Ex√©cuter imm√©diatement
    forceCanvasDisplay();
    
    // Surveiller les changements du DOM pour d√©tecter de nouveaux canvas
    const observer = new MutationObserver(function(mutations) {
        let shouldCheck = false;
        
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach(function(node) {
                    if (node.nodeType === 1) { // Element node
                        if (node.tagName === 'CANVAS' || node.classList?.contains('c3htmlwrap')) {
                            shouldCheck = true;
                        }
                        // V√©rifier aussi les enfants
                        if (node.querySelectorAll) {
                            const hasCanvas = node.querySelectorAll('canvas, .c3htmlwrap').length > 0;
                            if (hasCanvas) shouldCheck = true;
                        }
                    }
                });
            }
        });
        
        if (shouldCheck) {
            console.log("üîÑ Nouveaux √©l√©ments d√©tect√©s, v√©rification...");
            setTimeout(forceCanvasDisplay, 100); // Petit d√©lai pour laisser le temps au DOM
        }
    });
    
    // D√©marrer l'observation
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    // V√©rifier p√©riodiquement (au cas o√π)
    setInterval(forceCanvasDisplay, 2000);
    
    console.log("‚úÖ Fix Canvas Display - Surveillance active");
})(); 